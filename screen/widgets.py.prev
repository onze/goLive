import __builtin__

from direct.gui.DirectGui import *
from panda3d.core import CardMaker,NodePath,PNMImage,Texture

import layouts

CORNER=0
CENTER=1
mode=CORNER

class Widget(object):

	instances=[]
	MAXED=1

	def __init__(self,*args,**kwargs):
		#default values
		self.children=[]
		Widget.instances.append(self)
		self.pref_w=self.pref_h=Widget.MAXED
		self.layout=layouts.HLayout
		self._parent=None
		c=1.
		self.fill=80/c,80/c,230/c,180/c
		self.stroke=60/c,60/c,200/c,180/c
		self.is_valid=True
		#param values
		if len(args)==4:
			x,y,w,h=args
		else:
			x=y=w=h=0
		if 'x' in kwargs:x=kwargs['x']
		if 'y' in kwargs:y=kwargs['y']
		if 'w' in kwargs:w=kwargs['w']
		if 'h' in kwargs:h=kwargs['h']
		if mode==CORNER:
			self.x,self.y,self.w,self.h=x,y,w,h
		elif mode==CENTER:
			self.x,self.y,self.w,self.h=x-w/2.,y-h/2.,w,h
		if 'pref_size' in kwargs:self.pref_w,self.pref_h=kwargs['pref_size']
		if 'layout' in kwargs:self.layout=kwargs['layout']
		if 'parent' in kwargs:self.set_parent(kwargs['parent'])
		if 'fill' in kwargs:self.fill=kwargs['fill']
		if 'stroke' in kwargs:self.stroke=kwargs['stroke']

	def add_child(self,c):
		#print
		#print self,'.add_child(',c,')'
		self.children.append(c)
		valid=True
		tw=sum([c.pref_w for c in self.children])
		if tw>self.pref_w:
			self.pref_w=tw
			valid=False
		th=sum([c.pref_h for c in self.children])
		if th>self.pref_h:
			self.pref_h=th
			valid=False
		if not valid:
			self.invalid()
		else:
			self.valid()

	@staticmethod
	def chain_draw():
		print 'chain_draw'
		for i in Widget.instances:
			print i,'pos=',i.pos,'size=',i.size
			i.draw()

	def draw(self):
		if not self.is_valid:
			self.valid()
		stroke(*self.stroke)
		fill(*self.fill)
		rect(self.x,self.y,self.w,self.h)

	def get_parent(self):
		return self._parent

	def get_pos(self):
		return self.x,self.y

	def get_pref_size(self):
		return self.pref_w,self.pref_h

	def get_size(self):
		return self.w,self.h

	def invalid(self):
		#print self,'invalid'
		self.is_valid=False
		if self._parent:
			self._parent.invalid()
		else:
			self.valid()

	def remove_child(self,c):
		c.parent=None
		self.invalid()

	def set_parent(self,parent):
		if self._parent:
			self._parent.remove_child(self)
		self._parent=parent
		if parent:
			parent.add_child(self)

	def set_pos(self,pos):
		#print 'set_pos',pos
		self.x,self.y=pos

	def set_pref_size(self,size):
		self.pref_w,self.pref_h=size

	def set_size(self,size):
		#print 'set_size',size
		self.w,self.h=size

	def valid(self):
		#print self,'valid'
		self.is_valid=True
		if len(self.children):
			self.layout.reorganize(self)
			[c.valid() for c in self.children]

	parent=property(get_parent,set_parent)
	pos=property(get_pos,set_pos)
	pref_size=property(get_pref_size,set_pref_size)
	size=property(get_size,set_size)
