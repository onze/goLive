
import widgetwrappers

class HLayout:
	'''
	Implements an horizontal layout for the node Node instance.
	A Layout class must be bound to an instance of (Node,Widget).
	'''

	@staticmethod
	def reorganize(node):
		#print
		#print HLayout,'reorganize',node
		#spacers fill the gap between widgets
		num_spacer=float(len([c for c in node.children if isinstance(c,widgetwrappers.Spacer)]))
		if num_spacer>0:
			#total width asked by useful widgets
			efficient_width=sum([c.pref_size[0] for c in node.children if not isinstance(c,widgetwrappers.Spacer)])
			if efficient_width<node.w:
				#there is enough space for every widgets to take their preffered width
				#spacers will share the difference
				#set sizes
				for c in node.children:
					if isinstance(c,widgetwrappers.Spacer):
						c.size=(node.w-efficient_width)/num_spacer,node.h
					else:
						c.size=c.pref_w,node.h
		else:
			#total height needed
			total=0
			#number of widgets that don't care about their height (will share what's left)
			maxed=0
			for c in node.children:
				if c.pref_w==widgetwrappers.WidgetWrapper.MAXED:
					maxed+=1
				else:
					total+=c.pref_w
			rest=node.w-total
			out(rest=rest)
			if rest>=0:
				scale=1.
			else:
				rest,scale=0,node.w/float(total)
			for i,c in enumerate(node.children):
				if c.pref_w==widgetwrappers.WidgetWrapper.MAXED:
					c.size=(rest/float(maxed))*scale,node.h
				else:
					c.size=c.pref_w*scale,node.h
		#set pos's
		curr_x=0
		for c in node.children:
			c.pos=curr_x,0
			curr_x+=c.w

		for c in node.children:
			print c,'pos=',c.pos,'size=',c.size

class VLayout():
	'''
	implements a vertical layout for the node Node instance.
	A Layout class must be bound to an instance of (Node,Widget).
	'''

	@staticmethod
	def reorganize(node):
		#print
		#print VLayout,'reorganize',node
		#spacers fill the gap between widgets
		num_spacer=float(len([c for c in node.children if isinstance(c,widgetwrappers.Spacer)]))
		#print 'num_spacer=',num_spacer
		if num_spacer>0:
			#total width asked by useful widgets
			efficient_height=sum([c.pref_size[1] for c in node.children if not isinstance(c,widgetwrappers.Spacer)])
			#print 'efficient_height=',efficient_height
			if efficient_height<node.h:
				#there is enough space for every widgets to take their preffered width
				#spacers will share the difference
				#set sizes
				for c in node.children:
					if isinstance(c,widgetwrappers.Spacer):
						c.size=node.w,(node.h-efficient_height)/num_spacer
					else:
						c.size=node.w,c.pref_h
		else:
			#total height needed
			total=0
			#number of widgets that don't care about their height (will share what's left)
			maxed=0
			for c in node.children:
				if c.pref_h==widgetwrappers.WidgetWrapper.MAXED:
					maxed+=1
				else:
					total+=c.pref_h
			rest=node.h-total
			if rest>=0:
				scale=1.
			else:
				rest,scale=0,node.h/float(total)
			for i,c in enumerate(node.children):
				if c.pref_h==widgetwrappers.WidgetWrapper.MAXED:
					c.size=node.w,(rest/float(maxed))*scale
				else:
					c.size=node.w,c.pref_h*scale
		#set pos's
		curr_y=0
		for c in node.children:
			c.pos=0,curr_y
			curr_y+=c.h

		for c in node.children:
			print c,'pos=',c.pos,'size=',c.size



